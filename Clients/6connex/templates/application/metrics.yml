---
AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Autoscaling group for opsworks

Parameters:

  Identifier:
    Type: String
    Default: 6connex
    Description: A name identifier for the resources

  BuildsBucket:
    Type: String
    Description: builds bucket

  ImageId:
    Type: String
    Description: Amazon Linux image id

  StackId:
    Type: String
    Description: Opswork stack id

  LayerId:
    Type: String
    Description: Opswork layer id

  InstanceProfile:
    Type: String
    Description: Instance Profile to attach to the EC2 opswork instances

  SecurityGroupsIds:
    Type: List<String>
    Description: Security Ids to attach to LaunchTemplate

  InstanceType:
    Type: String
    Default: t2.small
    Description: Instance type

  KeyName:
    Type: String
    Default: LuisKeyPair
    Description: Keypair for the instances

  SubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of avalability zones

  S3ConfigFiles:
    Type: String
    Description: S3 Bucket to download configuration files

  RabbitMqUser:
    Type: String
    Description: rabbit mq user

  RabbitMqPassword:
    Type: String
    NoEcho: true
    Description: rabbit mq password

  RabbitMqPort:
    Type: Number
    Default: 0
    Description: rabbit mq port to use

  ConfigurationType:
    Type: String
    Default: 'rts'
    Description: type of configuration for files
    AllowedValues:
    - rts
    - other

  OwnerName:
    Type: String
    Default: nclouds
    Description: An arbitrary tag name for the owner of these resources

  ProjectName:
    Type: String
    Default: 6connex
    Description: The name of the stack to which these resources belong

  Environment:
    Type: String
    Default: dev
    Description: Environment name to append to resources names and tags


Resources:

  RabbitMqCredentialsSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub rabbit mq credentials in env ${Environment}
      Name: !Sub ${Environment}/${Identifier}/RabbitMq/RabbitmqCredentials
      SecretString: !Sub '{"username":"${RabbitMqUser}","password":"${RabbitMqPassword}"}'
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-rabbitmq-credentials
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  MetricsInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - RabbitMqCredentialsSecrets
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroupIds: !Ref SecurityGroupsIds
      SubnetId: !Select [ 2, !Ref SubnetsIds ]
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            sed -i'' -e 's/.*requiretty.*//' /etc/sudoers
            #pip install --upgrade awscli

            INSTANCE_ID=$(aws opsworks register --use-instance-profile --infrastructure-class ec2 --region us-east-1 --stack-id ${StackId} --override-hostname ${Identifier}-metrics --local 2>&1 |grep -o 'Instance ID: .*' |cut -d' ' -f3)
            /usr/bin/aws opsworks wait instance-registered --region us-east-1 --instance-id $INSTANCE_ID
            /usr/bin/aws opsworks assign-instance --region us-east-1 --instance-id $INSTANCE_ID --layer-ids ${LayerId}
            /usr/bin/aws configure set default.region ${AWS::Region}

            echo "ssm agent"
            sudo start amazon-ssm-agent

            # installing jq
            sudo yum install -y jq

            # updating aws cli
            sudo yum update -y aws-cli

            # getting db credentials
            echo export USER_DB=$(/usr/bin/aws secretsmanager get-secret-value --secret-id ${Environment}/${Identifier}/DB/DbCredentials --query 'SecretString' --output text | jq -r .username) >> /etc/environment
            echo export PASSWORD_DB=$(/usr/bin/aws secretsmanager get-secret-value --secret-id ${Environment}/${Identifier}/DB/DbCredentials --query 'SecretString' --output text | jq -r .password) >> /etc/environment
            echo export DB_ENDPOINT=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/${Environment}/${Identifier}/DB/DbEndpoint" | jq ".Parameters" | jq ".[] .Value" | sed -e 's/"//g' | sed -e 's/,$//g') >> /etc/environment

            # getting dw credentials
            echo export USER_DW=$(/usr/bin/aws secretsmanager get-secret-value --secret-id ${Environment}/${Identifier}/DB/DwCredentials --query 'SecretString' --output text | jq -r .username) >> /etc/environment
            echo export PASSWORD_DW=$(/usr/bin/aws secretsmanager get-secret-value --secret-id ${Environment}/${Identifier}/DB/DwCredentials --query 'SecretString' --output text | jq -r .password) >> /etc/environment
            echo export DW_ENDPOINT=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/${Environment}/${Identifier}/DB/DwEndpoint" | jq ".Parameters" | jq ".[] .Value" | sed -e 's/"//g' | sed -e 's/,$//g') >> /etc/environment

            # settinig redis endpoint and port
            echo export REDIS_ENDPOINT=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/${Environment}/${Identifier}/Redis/RedisEndpoint" | jq ".Parameters" | jq ".[] .Value" | sed -e 's/"//g' | sed -e 's/,$//g') >> /etc/environment
            echo export REDIS_PORT=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/${Environment}/${Identifier}/Redis/RedisPort" | jq ".Parameters" | jq ".[] .Value" | sed -e 's/"//g' | sed -e 's/,$//g') >> /etc/environment

            # settinig rabbit mq information
            echo export RABBITMQ_HOST=127.0.0.1 >> /etc/environment
            echo export RABBITMQ_PORT=${RabbitMqPort} >> /etc/environment
            echo export RABBITMQ_USER=$(/usr/bin/aws secretsmanager get-secret-value --secret-id ${Environment}/${Identifier}/RabbitMq/RabbitmqCredentials --query 'SecretString' --output text | jq -r .username) >> /etc/environment
            echo export RABBITMQ_PASSWORD=$(/usr/bin/aws secretsmanager get-secret-value --secret-id ${Environment}/${Identifier}/RabbitMq/RabbitmqCredentials --query 'SecretString' --output text | jq -r .password) >> /etc/environment
            echo export RABBIT_CONF=Yes >> /etc/environment
            echo export NODE_ID=${Identifier}-metrics >> /etc/environment

            # setting region and memcache name to grab the nodes
            echo export REGION=${AWS::Region} >> /etc/environment
            echo export MEMCACHE_CLUSTER=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/${Environment}/${Identifier}/Memcache/MemcacheClusterId" | jq ".Parameters" | jq ".[] .Value" | sed -e 's/"//g' | sed -e 's/,$//g') >> /etc/environment
            echo export MEMPORT=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/${Environment}/${Identifier}/Memcache/MemcachePort" | jq ".Parameters" | jq ".[] .Value" | sed -e 's/"//g' | sed -e 's/,$//g') >> /etc/environment

            # setting the type configuration for the nodes
            echo export CONF_TYPE=${ConfigurationType} >> /etc/environment
            echo export ENV=${Environment} >> /etc/environment

            # setting the efs endpoint
            echo export MOUNT_EFS=No >> /etc/environment

            # grabbing the files from s3 to set everything
            echo "configuration files"
            sudo /usr/bin/aws s3 sync s3://${S3ConfigFiles}/${Environment}/configuration_files /home/configuration
            cd /home/configuration
            sudo sh configuration.sh.template

            # executing jenkins job
            # build parameters
            echo BUILD_NUMBER=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/${Environment}/${Identifier}/Builds/BuildNumber" | jq ".Parameters" | jq ".[] .Value") >> jenkins_params.py
            echo JENKINS_USER=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/jenkins/username" | jq ".Parameters" | jq ".[] .Value") >> jenkins_params.py
            echo JENKINS_PASS=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/jenkins/password" | jq ".Parameters" | jq ".[] .Value") >> jenkins_params.py
            echo JENKINS_IP=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/jenkins/IpAddress" | jq ".Parameters" | jq ".[] .Value") >>  jenkins_params.py
            echo JENKINS_JOB=$(/usr/bin/aws ssm get-parameters --region ${AWS::Region} --names "/jenkins/MetricsJob" | jq ".Parameters" | jq ".[] .Value") >> jenkins_params.py
            echo ID_INSTANCE=\"$(curl  http://169.254.169.254/latest/meta-data/instance-id)\" >> jenkins_params.py
            echo "calling jenkins job"
            yum install python36 -y
            curl -O https://bootstrap.pypa.io/get-pip.py
            sudo python3 get-pip.py
            /usr/local/bin/pip3 install jenkinsapi
            sudo python3 jenkins_tringger.py.template
            sudo rm -rf jenkins_params.py
            cd /
            sudo rm -rf /home/configuration

      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-metricsnode
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  RabbitHostParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Sub /${Environment}/${Identifier}/RabbitMq/RabbitHost
      Type: String
      Value: !GetAtt MetricsInstance.PrivateIp
      Description: !Sub rabbit host on Environment ${Environment}
      Tags:
        Name: !Sub /${Environment}/${Identifier}/RabbitMq/RabbitHost
        OwnerName: !Ref OwnerName
        ProjectName: !Ref ProjectName
        Environment: !Ref  Environment
  
  RabbitPortParameter:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Sub /${Environment}/${Identifier}/RabbitMq/RabbitPort
      Type: String
      Value: !Ref RabbitMqPort
      Description: !Sub rabbit port on Environment ${Environment}
      Tags:
        Name: !Sub /${Environment}/${Identifier}/RabbitMq/RabbitPort
        OwnerName: !Ref OwnerName
        ProjectName: !Ref ProjectName
        Environment: !Ref  Environment
Outputs:

  MetricsNodeIp:
    Description: metrics node ip
    Value: !GetAtt MetricsInstance.PrivateIp

  MetricsNodeInstanceId:
    Description: metrics node instace id
    Value: !Ref MetricsInstance

  RabbitHostName:
    Description: rabbit host name
    Value: !Sub /${Environment}/${Identifier}/RabbitMq/RabbitHost

  RabbitPortName:
    Description: rabbit port name
    Value: !Sub /${Environment}/${Identifier}/RabbitMq/RabbitPort
