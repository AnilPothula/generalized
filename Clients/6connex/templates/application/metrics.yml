---
AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Autoscaling group for opsworks

Parameters:

  Identifier:
    Type: String
    Default: 6connex
    Description: A name identifier for the resources

  IdentifierRds:
    Type: String
    Description: rds identifier placed on the template

  ImageId:
    Type: String
    Description: Amazon Linux image id

  StackId:
    Type: String
    Description: Opswork stack id

  LayerId:
    Type: String
    Description: Opswork layer id

  InstanceProfile:
    Type: String
    Description: Instance Profile to attach to the EC2 opswork instances

  SecurityGroupsIds:
    Type: List<String>
    Description: Security Ids to attach to LaunchTemplate

  InstanceType:
    Type: String
    Default: t2.small
    Description: Instance type

  KeyName:
    Type: String
    Default: LuisKeyPair
    Description: Keypair for the instances

  SubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of avalability zones

  S3ConfigFiles:
    Type: String
    Description: S3 Bucket to download configuration files

  DbEndpoint:
    Type: String
    Default: ''
    Description: db endpoint value

  DwEndpoint:
    Type: String
    Default: ''
    Description: dw endpoint value

  EfsEndpoint:
    Type: String
    Default: ''
    Description: efs endpoint value

  RedisEndpoint:
    Type: String
    Default: ''
    Description: redis endpoint

  RedisPort:
    Type: Number
    Default: 0
    Description: redis port

  RabbitMqUser:
    Type: String
    Description: rabbit mq user

  RabbitMqPassword:
    Type: String
    NoEcho: true
    Description: rabbit mq password

  RabbitMqPort:
    Type: Number
    Default: 0
    Description: rabbit mq port to use

  MemcacheClusterId:
    Type: String
    Default: ''
    Description: memcache cluster id

  MemcachePort:
    Type: Number
    Default: 0
    Description: memcache port number

  ConfigurationType:
    Type: String
    Default: 'rts'
    Description: type of configuration for files
    AllowedValues:
    - rts
    - other

  OwnerName:
    Type: String
    Default: nclouds
    Description: An arbitrary tag name for the owner of these resources

  ProjectName:
    Type: String
    Default: 6connex
    Description: The name of the stack to which these resources belong

  Environment:
    Type: String
    Default: dev
    Description: Environment name to append to resources names and tags


Resources:

  RabbitMqCredentialsSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub rabbit mq credentials in env ${Environment}
      Name: !Sub metrics/${Identifier}/${Environment}/RabbitmqCredentials
      SecretString: !Sub '{"username":"${RabbitMqUser}","password":"${RabbitMqPassword}"}'
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-rabbitmq-credentials
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  MetricsInstance:
    Type: AWS::EC2::Instance
    DependsOn:
    - RabbitMqCredentialsSecrets
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroupIds: !Ref SecurityGroupsIds
      SubnetId: !Select [ 1, !Ref SubnetsIds ]
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            sed -i'' -e 's/.*requiretty.*//' /etc/sudoers
            #pip install --upgrade awscli

            INSTANCE_ID=$(aws opsworks register --use-instance-profile --infrastructure-class ec2 --region us-east-1 --stack-id ${StackId} --override-hostname ${Identifier}-metrics --local 2>&1 |grep -o 'Instance ID: .*' |cut -d' ' -f3)
            /usr/bin/aws opsworks wait instance-registered --region us-east-1 --instance-id $INSTANCE_ID
            /usr/bin/aws opsworks assign-instance --region us-east-1 --instance-id $INSTANCE_ID --layer-ids ${LayerId}
            /usr/bin/aws configure set default.region ${AWS::Region}

            echo "ssm agent"
            sudo start amazon-ssm-agent

            # installing jq
            sudo yum install -y jq

            # updating aws cli
            sudo yum update -y aws-cli

            # getting db credentials
            echo export USER_DB=$(/usr/bin/aws secretsmanager get-secret-value --secret-id database/${IdentifierRds}/${Environment}/DbCredentials --query 'SecretString' --output text | jq -r .username) >> /etc/environment
            echo export PASSWORD_DB=$(/usr/bin/aws secretsmanager get-secret-value --secret-id database/${IdentifierRds}/${Environment}/DbCredentials --query 'SecretString' --output text | jq -r .password) >> /etc/environment
            echo export DB_ENDPOINT=${DbEndpoint} >> /etc/environment

            # getting dw credentials
            echo export USER_DW=$(/usr/bin/aws secretsmanager get-secret-value --secret-id database/${IdentifierRds}/${Environment}/DwCredentials --query 'SecretString' --output text | jq -r .username) >> /etc/environment
            echo export PASSWORD_DW=$(/usr/bin/aws secretsmanager get-secret-value --secret-id database/${IdentifierRds}/${Environment}/DwCredentials --query 'SecretString' --output text | jq -r .password) >> /etc/environment
            echo export DW_ENDPOINT=${DwEndpoint} >> /etc/environment

            # settinig redis endpoint and port
            echo export REDIS_ENDPOINT=${RedisEndpoint} >> /etc/environment
            echo export REDIS_PORT=${RedisPort} >> /etc/environment

            # settinig rabbit mq information
            echo export RABBITMQ_HOST=127.0.0.1 >> /etc/environment
            echo export RABBITMQ_PORT=${RabbitMqPort} >> /etc/environment
            echo export RABBITMQ_USER=$(/usr/bin/aws secretsmanager get-secret-value --secret-id metrics/${Identifier}/${Environment}/RabbitmqCredentials --query 'SecretString' --output text | jq -r .username) >> /etc/environment
            echo export RABBITMQ_PASSWORD=$(/usr/bin/aws secretsmanager get-secret-value --secret-id metrics/${Identifier}/${Environment}/RabbitmqCredentials --query 'SecretString' --output text | jq -r .password) >> /etc/environment
            echo export RABBIT_CONF=Yes >> /etc/environment
            echo export NODE_ID=${Identifier}-metrics >> /etc/environment

            # setting region and memcache name to grab the nodes
            echo export REGION=${AWS::Region} >> /etc/environment
            echo export MEMCACHE_CLUSTER=${MemcacheClusterId} >> /etc/environment
            echo export MEMPORT=${MemcachePort} >> /etc/environment

            # setting the type configuration for the nodes
            echo export CONF_TYPE=${ConfigurationType} >> /etc/environment
            echo export ENV=${Environment} >> /etc/environment

            # setting the efs endpoint
            echo export MOUNT_EFS=No >> /etc/environment

            # grabbing the files from s3 to set everything
            echo "configuration files"
            sudo /usr/bin/aws s3 sync s3://${S3ConfigFiles}/${Environment}/configuration_files /home/configuration
            cd /home/configuration
            sudo sh configuration.sh.template

      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-metricsnode
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

Outputs:

  MetricsNodeIp:
    Description: metrics node ip
    Value: !GetAtt MetricsInstance.PrivateIp

  MetricsNodeInstanceId:
    Description: metrics node instace id
    Value: !Ref MetricsInstance
