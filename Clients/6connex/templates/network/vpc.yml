---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Resources for VPC and routing using 3 Availability Zones
  It includes a VPC with two public subnets and private subnets (data subnets and 
  application subnets),
  an ACL for the subets, a pair of NAT Gateways (one in each AZ)
  and default routes for them in the private subnets
Parameters:

  Identifier:
    Type: String
    Description: A name identifier to tag the networking resources

  VpcCidr:
    Type: String
    Default: 172.16.0.0/16
    Description: IPV4 CIDR block for the VPC
    AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}/(\\d{1,2})"
    ConstraintDescription: You must enter a valid CIDR string

  PublicSubnetsCidr:
    Type: List<String>
    Default: 172.16.10.0/24,172.16.11.0/24
    Description: IPV4 CIDR blocks for the public subnets

  DataSubnetsCidr:
    Type: List<String>
    Default: 172.16.10.0/24,172.16.11.0/24
    Description: IPV4 CIDR blocks for the data subnets

  ApplicationSubnetsCidr:
    Type: List<String>
    Default: 172.16.10.0/24,172.16.11.0/24
    Description: IPV4 CIDR blocks for the application subnets

  SetNatGateway:
    Description: Whether to deploy a Nat Gateway or not
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: Value must be true or false

  NatGatewayHA:
    Type: String
    Default: false
    Description: Wheter to add redundancy for high availability for the Nat Gateway
    AllowedValues:
      - true
      - false
    ConstraintDescription: Value must be true or false

  # ###############  MGM Peering #######
  RequesterVpcId:
    Type: String
    Description: Id of the requester VPC

  RequesterVpcCidrBlock:
    Type: String
    Description: CIDR block of requester VPC

  MgmtRegion:
    Type: String
    Description: region where the management vpc is located
  # ############### Stack ##############

  OwnerName:
    Type: String
    Default: nclouds
    Description: An arbitrary tag name for the owner of these resources

  ProjectName:
    Type: String
    Description: The name of the project to which these resources belong

  Environment:
    Type: String
    Default: dev
    Description: Environment name to append to resources names and tags

Conditions:

  CreateNatGateway: !Equals [ !Ref SetNatGateway, true ]

  RedundantNatGateway: !And [ !Condition CreateNatGateway, !Equals [ !Ref NatGatewayHA, true ] ]

Resources:

  # ############## Network #############

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      InstanceTenancy: default
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ############# PUBLIC SUBNETS #############

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-public-subnet-1
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-public-subnet-2
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-public-subnet-3
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment
  
  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-public-subnet-4
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PublicSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 4, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-public-subnet-5
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PublicSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 5, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 5, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-public-subnet-6
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ############# DATA SUBNETS #############

  DataSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Ref DataSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-data-subnet-1
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  DataSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Ref DataSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-data-subnet-2
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  DataSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Ref DataSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-data-subnet-3
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  DataSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Ref DataSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-data-subnet-4
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  DataSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 4, !Ref DataSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-data-subnet-5
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  DataSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 5, !Ref DataSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 5, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-data-subnet-6
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ############# DATA SUBNETS #############

  ApplicationSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Ref ApplicationSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-application-subnet-1
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ApplicationSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Ref ApplicationSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-application-subnet-2
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ApplicationSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Ref ApplicationSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-application-subnet-3
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ApplicationSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Ref ApplicationSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-application-subnet-4
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ApplicationSubnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 4, !Ref ApplicationSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 4, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-application-subnet-5
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  ApplicationSubnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 5, !Ref ApplicationSubnetsCidr ]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 5, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-application-subnet-6
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  # ############## Routing #############

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-igw
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  IgwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc    

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-public-rt
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment
  
  PrivateRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-private-rt-1
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PrivateRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-private-rt-2
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PrivateRT3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-private-rt-3
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PrivateRT4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-private-rt-4
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  PrivateRT5:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-private-rt-5
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment
  
  PrivateRT6:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-private-rt-6
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  RouteToIgw:
    Type: AWS::EC2::Route
    DependsOn: 
    - Igw
    - IgwAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRT
      GatewayId: !Ref Igw

  ############# PUBLIC SUBNETS #############
  PublicSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet3

  PublicSubnet4RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet4

  PublicSubnet5RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet5

  PublicSubnet6RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet6

  ############# DATA SUBNETS #############

  DataSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT1
      SubnetId: !Ref DataSubnet1

  DataSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT2
      SubnetId: !Ref DataSubnet2

  DataSubnet3RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT3
      SubnetId: !Ref DataSubnet3

  DataSubnet4RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT4
      SubnetId: !Ref DataSubnet4

  DataSubnet5RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT5
      SubnetId: !Ref DataSubnet5

  DataSubnet6RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT6
      SubnetId: !Ref DataSubnet6

  ############# APPLICATION SUBNETS #############

  ApplicationSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT1
      SubnetId: !Ref ApplicationSubnet1

  ApplicationSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT2
      SubnetId: !Ref ApplicationSubnet2

  ApplicationSubnet3RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT3
      SubnetId: !Ref ApplicationSubnet3

  ApplicationSubnet4RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT4
      SubnetId: !Ref ApplicationSubnet4

  ApplicationSubnet5RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT5
      SubnetId: !Ref ApplicationSubnet5

  ApplicationSubnet6RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT6
      SubnetId: !Ref ApplicationSubnet6

  # ################ NAT ###############

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Condition: CreateNatGateway
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Condition: RedundantNatGateway
    Properties:
      Domain: vpc

  NatGatewayEIP3:
    Type: AWS::EC2::EIP
    Condition: RedundantNatGateway
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: CreateNatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags: 
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-nat-1
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: RedundantNatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet3
      Tags: 
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-nat-2
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Condition: RedundantNatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP3.AllocationId
      SubnetId: !Ref PublicSubnet5
      Tags: 
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-nat-3
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  RouteToNat1:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRT1
      NatGatewayId: !Ref NatGateway1

  RouteToNat2:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRT2
      NatGatewayId: !Ref NatGateway1

  RouteToNat3:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRT3
      NatGatewayId: !If [ RedundantNatGateway, !Ref NatGateway2, !Ref NatGateway1 ]

  RouteToNat4:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRT4
      NatGatewayId: !If [ RedundantNatGateway, !Ref NatGateway2, !Ref NatGateway1 ]

  RouteToNat5:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRT5
      NatGatewayId: !If [ RedundantNatGateway, !Ref NatGateway3, !Ref NatGateway1 ]

  RouteToNat6:
    Type: AWS::EC2::Route
    Condition: CreateNatGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRT6
      NatGatewayId: !If [ RedundantNatGateway, !Ref NatGateway3, !Ref NatGateway1 ]

  # ### Network Access Control Lists ###

  Acl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-acl
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  AllowAllInboundTrafic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Acl
      CidrBlock: 0.0.0.0/0
      RuleNumber: 10
      RuleAction: Allow
      Egress: false
      Protocol: -1

  AllowAllOutboundTrafic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref Acl
      CidrBlock: 0.0.0.0/0
      RuleNumber: 10
      RuleAction: Allow
      Egress: true
      Protocol: -1

  DataSubnet1AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataSubnet1
      NetworkAclId: !Ref Acl

  DataSubnet2AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataSubnet2
      NetworkAclId: !Ref Acl

  DataSubnet3AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataSubnet3
      NetworkAclId: !Ref Acl

  DataSubnet4AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataSubnet4
      NetworkAclId: !Ref Acl

  DataSubnet5AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataSubnet5
      NetworkAclId: !Ref Acl

  DataSubnet6AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref DataSubnet6
      NetworkAclId: !Ref Acl

  ApplicationSubnet1AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet1
      NetworkAclId: !Ref Acl

  ApplicationSubnet2AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet2
      NetworkAclId: !Ref Acl

  ApplicationSubnet3AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet3
      NetworkAclId: !Ref Acl

  ApplicationSubnet4AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet4
      NetworkAclId: !Ref Acl

  ApplicationSubnet5AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet5
      NetworkAclId: !Ref Acl

  ApplicationSubnet6AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ApplicationSubnet6
      NetworkAclId: !Ref Acl

  ############## VPC Peering ######################
  VpcPeering:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      PeerVpcId: !Ref RequesterVpcId
      VpcId: !Ref Vpc
      PeerRegion: !Ref MgmtRegion
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-peering
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  AccepterToRequesterRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRT
      VpcPeeringConnectionId: !Ref VpcPeering
      DestinationCidrBlock: !Ref RequesterVpcCidrBlock

  AccepterToRequesterRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT1
      VpcPeeringConnectionId: !Ref VpcPeering
      DestinationCidrBlock: !Ref RequesterVpcCidrBlock

  AccepterToRequesterRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT2
      VpcPeeringConnectionId: !Ref VpcPeering
      DestinationCidrBlock: !Ref RequesterVpcCidrBlock

  AccepterToRequesterRoute4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT3
      VpcPeeringConnectionId: !Ref VpcPeering
      DestinationCidrBlock: !Ref RequesterVpcCidrBlock

  AccepterToRequesterRoute5:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT4
      VpcPeeringConnectionId: !Ref VpcPeering
      DestinationCidrBlock: !Ref RequesterVpcCidrBlock

  AccepterToRequesterRoute6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT5
      VpcPeeringConnectionId: !Ref VpcPeering
      DestinationCidrBlock: !Ref RequesterVpcCidrBlock

  AccepterToRequesterRoute7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRT6
      VpcPeeringConnectionId: !Ref VpcPeering
      DestinationCidrBlock: !Ref RequesterVpcCidrBlock
  ############## VPC Peering ######################

Outputs:

  VpcId:
    Value: !Ref Vpc
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-vpc

  PublicRouteTable:
    Value: !Ref PublicRT
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-rt

  PrivateRouteTable1:
    Value: !Ref PrivateRT1
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-private-rt-1

  PrivateRouteTable2:
    Value: !Ref PrivateRT2
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-private-rt-2

  PrivateRouteTable3:
    Value: !Ref PrivateRT2
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-private-rt-3

  PublicSubnetIds:
    Description: List of the public subnets ids
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PublicSubnet4, !Ref PublicSubnet5, !Ref PublicSubnet6 ] ]
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-subnets

  DataSubnetIds:
    Description: List of the Data subnets ids
    Value: !Join [ ",", [ !Ref DataSubnet1, !Ref DataSubnet2, !Ref DataSubnet3, !Ref DataSubnet4, !Ref DataSubnet5, !Ref DataSubnet6 ] ]
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-data-subnets

  ApplicationSubnetIds:
    Description: List of the Application subnets ids
    Value: !Join [ ",", [ !Ref ApplicationSubnet1, !Ref ApplicationSubnet2, !Ref ApplicationSubnet3, !Ref ApplicationSubnet4, !Ref ApplicationSubnet5, !Ref ApplicationSubnet6 ] ]
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-application-subnets

  PublicSubnet1Id:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-subnet-1

  PublicSubnet2Id:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-subnet-2

  PublicSubnet3Id:
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-subnet-3

  PublicSubnet4Id:
    Value: !Ref PublicSubnet4
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-subnet-4

  PublicSubnet5Id:
    Value: !Ref PublicSubnet5
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-subnet-5

  PublicSubnet6Id:
    Value: !Ref PublicSubnet6
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-public-subnet-6

  DataSubnet1Id:
    Value: !Ref DataSubnet1
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-data-subnet-1

  DataSubnet2Id:
    Value: !Ref DataSubnet2
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-data-subnet-2

  DataSubnet3Id:
    Value: !Ref DataSubnet3
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-data-subnet-3

  DataSubnet4Id:
    Value: !Ref DataSubnet4
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-data-subnet-4

  DataSubnet5Id:
    Value: !Ref DataSubnet5
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-data-subnet-5

  DataSubnet6Id:
    Value: !Ref DataSubnet6
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-data-subnet-6

  ApplicationSubnet1Id:
    Value: !Ref ApplicationSubnet1
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-application-subnet-1

  ApplicationSubnet2Id:
    Value: !Ref ApplicationSubnet2
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-application-subnet-2

  ApplicationSubnet3Id:
    Value: !Ref ApplicationSubnet3
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-application-subnet-3

  ApplicationSubnet4Id:
    Value: !Ref ApplicationSubnet4
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-application-subnet-4

  ApplicationSubnet5Id:
    Value: !Ref ApplicationSubnet5
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-application-subnet-5

  ApplicationSubnet6Id:
    Value: !Ref ApplicationSubnet6
    Export:
      Name: !Sub ${ProjectName}:${Identifier}-application-subnet-6